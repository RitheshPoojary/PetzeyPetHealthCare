// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PetzeyPetHealthCare.Model.Data_Access;

#nullable disable

namespace PetzeyPetHealthCare.Migrations
{
    [DbContext(typeof(PetDbContext))]
    partial class PetDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PetzeyPetHealthCare.Model.Entity.AppointmentHistory", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("AppointmentId");

                    b.HasIndex("PatientId");

                    b.ToTable("appointmentHistories");
                });

            modelBuilder.Entity("PetzeyPetHealthCare.Model.Entity.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<string>("BreedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PetSpecies")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("petOwnerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PatientId");

                    b.HasIndex("petOwnerName");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("PetzeyPetHealthCare.Model.Entity.PetInfo", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientID"));

                    b.Property<string>("PetOwnerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PatientID");

                    b.HasIndex("PetOwnerName");

                    b.ToTable("petInfos");
                });

            modelBuilder.Entity("PetzeyPetHealthCare.Model.Entity.PetOwner", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PhoneNumber")
                        .HasColumnType("bigint");

                    b.HasKey("Name");

                    b.ToTable("petOwner");
                });

            modelBuilder.Entity("PetzeyPetHealthCare.Model.Entity.Prescription", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("AppointmentId");

                    b.HasIndex("PatientId");

                    b.ToTable("Prescription");
                });

            modelBuilder.Entity("PetzeyPetHealthCare.Model.Entity.Symptoms", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("AppointmentId");

                    b.HasIndex("PatientId");

                    b.ToTable("Symptoms");
                });

            modelBuilder.Entity("PetzeyPetHealthCare.Model.Entity.Vitals", b =>
                {
                    b.Property<int>("VitalsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VitalsId"));

                    b.Property<int>("Bpm")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Pulse")
                        .HasColumnType("int");

                    b.Property<string>("Temperature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VitalsId");

                    b.HasIndex("PatientId");

                    b.ToTable("vitals");
                });

            modelBuilder.Entity("PetzeyPetHealthCare.Model.Entity.AppointmentHistory", b =>
                {
                    b.HasOne("PetzeyPetHealthCare.Model.Entity.Patient", null)
                        .WithMany("appointmentHistories")
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("PetzeyPetHealthCare.Model.Entity.Patient", b =>
                {
                    b.HasOne("PetzeyPetHealthCare.Model.Entity.PetOwner", "petOwner")
                        .WithMany("Pets")
                        .HasForeignKey("petOwnerName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("petOwner");
                });

            modelBuilder.Entity("PetzeyPetHealthCare.Model.Entity.PetInfo", b =>
                {
                    b.HasOne("PetzeyPetHealthCare.Model.Entity.PetOwner", "PetOwner")
                        .WithMany()
                        .HasForeignKey("PetOwnerName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PetOwner");
                });

            modelBuilder.Entity("PetzeyPetHealthCare.Model.Entity.Prescription", b =>
                {
                    b.HasOne("PetzeyPetHealthCare.Model.Entity.Patient", null)
                        .WithMany("prescriptions")
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("PetzeyPetHealthCare.Model.Entity.Symptoms", b =>
                {
                    b.HasOne("PetzeyPetHealthCare.Model.Entity.Patient", null)
                        .WithMany("symptoms")
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("PetzeyPetHealthCare.Model.Entity.Vitals", b =>
                {
                    b.HasOne("PetzeyPetHealthCare.Model.Entity.Patient", null)
                        .WithMany("vitals")
                        .HasForeignKey("PatientId");
                });

            modelBuilder.Entity("PetzeyPetHealthCare.Model.Entity.Patient", b =>
                {
                    b.Navigation("appointmentHistories");

                    b.Navigation("prescriptions");

                    b.Navigation("symptoms");

                    b.Navigation("vitals");
                });

            modelBuilder.Entity("PetzeyPetHealthCare.Model.Entity.PetOwner", b =>
                {
                    b.Navigation("Pets");
                });
#pragma warning restore 612, 618
        }
    }
}
